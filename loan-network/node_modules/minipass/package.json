{
  "_args": [
    [
      {
        "raw": "minipass@^2.2.1",
        "scope": null,
        "escapedName": "minipass",
        "name": "minipass",
        "rawSpec": "^2.2.1",
        "spec": ">=2.2.1 <3.0.0",
        "type": "range"
      },
      "/Users/bhavinshah/hyper2/loan-network/node_modules/tar"
    ]
  ],
  "_from": "minipass@>=2.2.1 <3.0.0",
  "_id": "minipass@2.3.3",
  "_inCache": true,
  "_location": "/minipass",
  "_nodeVersion": "10.0.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/minipass_2.3.3_1527015575005_0.7372253058813618"
  },
  "_npmUser": {
    "name": "isaacs",
    "email": "i@izs.me"
  },
  "_npmVersion": "6.0.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "minipass@^2.2.1",
    "scope": null,
    "escapedName": "minipass",
    "name": "minipass",
    "rawSpec": "^2.2.1",
    "spec": ">=2.2.1 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/fs-minipass",
    "/minizlib",
    "/tar"
  ],
  "_resolved": "https://registry.npmjs.org/minipass/-/minipass-2.3.3.tgz",
  "_shasum": "a7dcc8b7b833f5d368759cce544dccb55f50f233",
  "_shrinkwrap": null,
  "_spec": "minipass@^2.2.1",
  "_where": "/Users/bhavinshah/hyper2/loan-network/node_modules/tar",
  "author": {
    "name": "Isaac Z. Schlueter",
    "email": "i@izs.me",
    "url": "http://blog.izs.me/"
  },
  "bugs": {
    "url": "https://github.com/isaacs/minipass/issues"
  },
  "dependencies": {
    "safe-buffer": "^5.1.2",
    "yallist": "^3.0.0"
  },
  "description": "minimal implementation of a PassThrough stream",
  "devDependencies": {
    "end-of-stream": "^1.4.0",
    "tap": "^12.0.1",
    "through2": "^2.0.3"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-/jAn9/tEX4gnpyRATxgHEOV6xbcyxgT7iUnxo9Y3+OB0zX00TgKIv/2FZCf5brBbICcwbLqVv2ImjvWWrQMSYw==",
    "shasum": "a7dcc8b7b833f5d368759cce544dccb55f50f233",
    "tarball": "https://registry.npmjs.org/minipass/-/minipass-2.3.3.tgz",
    "fileCount": 3,
    "unpackedSize": 13779,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbBGiYCRA9TVsSAnZWagAA4fUQAIXgODe6XSj8mBz51x/Y\n+bpAwb72xK1aOG5CoIwCQtPe65iqpIi24Mf9jbjGNdtYwOmIzTR+g1q2LT6l\n9JYKz4ukcOr3u0fSWi35bd+vc4uaqps1r6fXt+CX6BXfW/Z0NZ/4PlkW35q3\n0Tw+Fzon7UhJgtCMw9/DoWohAYJTGrzcsxQhodJph7GXgmSUh+9lL1H/nvKP\nWdjw1B3QK2aXREnH7aX4LipMWpTF9oYZYPxFrel2r32OV+/yqOShKMDgE0X+\nN/7MFagmqnHVUk1ifksU14Omt4JjTiGhVvd3/L77BI1jzNe886Kn4nHr9yNg\n8vYr8fAhg8H0gS04WI8mQNR/0Wtg0wDwhx8SVfwOU+74tV67MX3zC5usqKzy\nZW8isJcJPM61NqCQJbz/RQOVNFLkp84YHEraNH+5JDaLAMXgoTMFdGHW0AUU\n4HkMerUxF2Q1f2DFsdftcpWvr5LAw2rB/T2yA09xFGlfe9vqsONR+twcZmr8\nmhuFFOxkrQyN+PE/dRVl+1CeXrHW/bvVnt73H+a3p3RcWSv90MmBSztCw0P0\nMYz50+U7HxyCFjVufjNpV0t3h+6Q83eoEr+/lL299yPScuXsTvVhnIeV0a8M\nJK9MVHI4DIyZqAvP78/hTr88Dh8Ow+uA26JBNRP90/yJ9ZyiUwqt/sWUmv4C\nplh1\r\n=9vM2\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "eb6835c4199e205fae9ae48c5340ff4b3edca60e",
  "homepage": "https://github.com/isaacs/minipass#readme",
  "keywords": [
    "passthrough",
    "stream"
  ],
  "license": "ISC",
  "main": "index.js",
  "maintainers": [
    {
      "name": "isaacs",
      "email": "i@izs.me"
    }
  ],
  "name": "minipass",
  "optionalDependencies": {},
  "readme": "# minipass\n\nA _very_ minimal implementation of a [PassThrough\nstream](https://nodejs.org/api/stream.html#stream_class_stream_passthrough)\n\n[It's very\nfast](https://docs.google.com/spreadsheets/d/1oObKSrVwLX_7Ut4Z6g3fZW-AX1j1-k6w-cDsrkaSbHM/edit#gid=0)\nfor objects, strings, and buffers.\n\nSupports pipe()ing (including multi-pipe() and backpressure\ntransmission), buffering data until either a `data` event handler or\n`pipe()` is added (so you don't lose the first chunk), and most other\ncases where PassThrough is a good idea.\n\nThere is a `read()` method, but it's much more efficient to consume\ndata from this stream via `'data'` events or by calling `pipe()` into\nsome other stream.  Calling `read()` requires the buffer to be\nflattened in some cases, which requires copying memory.\n\nThere is also no `unpipe()` method.  Once you start piping, there is\nno stopping it!\n\nIf you set `objectMode: true` in the options, then whatever is written\nwill be emitted.  Otherwise, it'll do a minimal amount of Buffer\ncopying to ensure proper Streams semantics when `read(n)` is called.\n\nThis is not a `through` or `through2` stream.  It doesn't transform\nthe data, it just passes it right through.  If you want to transform\nthe data, extend the class, and override the `write()` method.  Once\nyou're done transforming the data however you want, call\n`super.write()` with the transform output.\n\nFor an example of a stream that extends MiniPass to provide transform\ncapabilities, check out [minizlib](http://npm.im/minizlib).\n\n## USAGE\n\n```js\nconst MiniPass = require('minipass')\nconst mp = new MiniPass(options) // optional: { encoding }\nmp.write('foo')\nmp.pipe(someOtherStream)\nmp.end('bar')\n```\n\n### collecting\n\n```js\nmp.collect().then(all => {\n  // all is an array of all the data emitted\n  // encoding is supported in this case, so\n  // so the result will be a collection of strings if\n  // an encoding is specified, or buffers/objects if not.\n  //\n  // In an async function, you may do\n  // const data = await stream.collect()\n})\n```\n\n### iteration\n\nYou can iterate over streams synchronously or asynchronously in\nplatforms that support it.\n\nSynchronous iteration will end when the currently available data is\nconsumed, even if the `end` event has not been reached.  In string and\nbuffer mode, the data is concatenated, so unless multiple writes are\noccurring in the same tick as the `read()`, sync iteration loops will\ngenerally only have a single iteration.\n\nTo consume chunks in this way exactly as they have been written, with\nno flattening, create the stream with the `{ objectMode: true }`\noption.\n\n```js\nconst mp = new Minipass({ objectMode: true })\nmp.write('a')\nmp.write('b')\nfor (let letter of mp) {\n  console.log(letter) // a, b\n}\nmp.write('c')\nmp.write('d')\nfor (let letter of mp) {\n  console.log(letter) // c, d\n}\nmp.write('e')\nmp.end()\nfor (let letter of mp) {\n  console.log(letter) // e\n}\nfor (let letter of mp) {\n  console.log(letter) // nothing\n}\n```\n\nAsynchronous iteration will continue until the end event is reached,\nconsuming all of the data.\n\n```js\nconst mp = new Minipass({ encoding: 'utf8' })\n\n// some source of some data\nlet i = 5\nconst inter = setInterval(() => {\n  if (i --> 0)\n    mp.write(Buffer.from('foo\\n', 'utf8'))\n  else {\n    mp.end()\n    clearInterval(inter)\n  }\n}, 100)\n\n// consume the data with asynchronous iteration\nasync function consume () {\n  for await (let chunk of mp) {\n    console.log(chunk)\n  }\n  return 'ok'\n}\n\nconsume().then(res => console.log(res))\n// logs `foo\\n` 5 times, and then `ok`\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/isaacs/minipass.git"
  },
  "scripts": {
    "postpublish": "git push origin --all; git push origin --tags",
    "postversion": "npm publish",
    "preversion": "npm test",
    "test": "tap test/*.js --100"
  },
  "version": "2.3.3"
}
