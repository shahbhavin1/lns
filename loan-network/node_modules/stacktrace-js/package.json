{
  "_args": [
    [
      {
        "raw": "stacktrace-js@^2.0.0",
        "scope": null,
        "escapedName": "stacktrace-js",
        "name": "stacktrace-js",
        "rawSpec": "^2.0.0",
        "spec": ">=2.0.0 <3.0.0",
        "type": "range"
      },
      "/Users/bhavinshah/hyper2/loan-network/node_modules/cucumber"
    ]
  ],
  "_from": "stacktrace-js@>=2.0.0 <3.0.0",
  "_id": "stacktrace-js@2.0.0",
  "_inCache": true,
  "_location": "/stacktrace-js",
  "_nodeVersion": "7.9.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/stacktrace-js-2.0.0.tgz_1493614360672_0.47327508544549346"
  },
  "_npmUser": {
    "name": "eriwen",
    "email": "me@eriwen.com"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "stacktrace-js@^2.0.0",
    "scope": null,
    "escapedName": "stacktrace-js",
    "name": "stacktrace-js",
    "rawSpec": "^2.0.0",
    "spec": ">=2.0.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/cucumber"
  ],
  "_resolved": "https://registry.npmjs.org/stacktrace-js/-/stacktrace-js-2.0.0.tgz",
  "_shasum": "776ca646a95bc6c6b2b90776536a7fc72c6ddb58",
  "_shrinkwrap": null,
  "_spec": "stacktrace-js@^2.0.0",
  "_where": "/Users/bhavinshah/hyper2/loan-network/node_modules/cucumber",
  "bugs": {
    "url": "https://github.com/stacktracejs/stacktrace.js/issues"
  },
  "dependencies": {
    "error-stack-parser": "^2.0.1",
    "stack-generator": "^2.0.1",
    "stacktrace-gps": "^3.0.1"
  },
  "description": "Framework-agnostic, micro-library for getting stack traces in all environments",
  "devDependencies": {
    "browserify": "^13.1.0",
    "colors": "^1.1.2",
    "del": "^1.2.0",
    "es6-promise": "^3.1.2",
    "gulp": "^3.9.1",
    "gulp-concat": "^2.6.0",
    "gulp-coveralls": "^0.1.4",
    "gulp-jshint": "^1.12.0",
    "gulp-rename": "^1.2.2",
    "gulp-sourcemaps": "^1.5.2",
    "gulp-uglify": "^1.5.1",
    "jasmine": "^2.3.2",
    "jasmine-ajax": "^3.2.0",
    "jasmine-core": "^2.3.4",
    "jscs": "^2.9.0",
    "jsdoc-dash-template": "^1.2.0",
    "json3": "^3.3.2",
    "karma": "^0.13.15",
    "karma-chrome-launcher": "^0.2.1",
    "karma-coverage": "^0.5.2",
    "karma-firefox-launcher": "^0.1.7",
    "karma-ie-launcher": "^0.2.0",
    "karma-jasmine": "^0.3.6",
    "karma-jasmine-ajax": "^0.1.13",
    "karma-opera-launcher": "^0.3.0",
    "karma-phantomjs2-launcher": "^0.3.2",
    "karma-safari-launcher": "^0.1.1",
    "karma-sauce-launcher": "^0.2.14",
    "karma-spec-reporter": "0.0.23",
    "run-sequence": "^1.1.2",
    "vinyl-buffer": "^1.0.0",
    "vinyl-source-stream": "^1.1.0"
  },
  "directories": {},
  "dist": {
    "shasum": "776ca646a95bc6c6b2b90776536a7fc72c6ddb58",
    "tarball": "https://registry.npmjs.org/stacktrace-js/-/stacktrace-js-2.0.0.tgz"
  },
  "files": [
    "LICENSE",
    "CHANGELOG.md",
    "README.md",
    "stacktrace.js",
    "dist/"
  ],
  "gitHead": "5c823482748f48474c56f134abe7681737fa3e69",
  "homepage": "https://www.stacktracejs.com",
  "keywords": [
    "stacktrace",
    "error",
    "debugger",
    "client",
    "browser"
  ],
  "license": "MIT",
  "main": "./stacktrace.js",
  "maintainers": [
    {
      "name": "Eric Wendelin",
      "email": "me@eriwen.com",
      "url": "https://www.eriwen.com"
    },
    {
      "name": "Victor Homyakov",
      "email": "vkhomyackov@gmail.com",
      "url": "https://github.com/victor-homyakov"
    },
    {
      "name": "Oliver Salzburg",
      "url": "https://github.com/oliversalzburg"
    }
  ],
  "name": "stacktrace-js",
  "optionalDependencies": {},
  "readme": "# stacktrace.js\nGenerate, parse and enhance JavaScript stack traces in all browsers\n\n[![Build Status](https://img.shields.io/travis/stacktracejs/stacktrace.js/master.svg?style=flat-square)](https://travis-ci.org/stacktracejs/stacktrace.js) \n[![Coverage Status](https://img.shields.io/coveralls/stacktracejs/stacktrace.js.svg?style=flat-square)](https://coveralls.io/r/stacktracejs/stacktrace.js?branch=master) \n[![GitHub license](https://img.shields.io/github/license/stacktracejs/stacktrace.js.svg?style=flat-square)](https://opensource.org/licenses/MIT)\n[![CDNJS](https://img.shields.io/cdnjs/v/stacktrace.js.svg?style=flat-square)](https://cdnjs.com/libraries/stacktrace.js)\n[![size with dependencies](https://img.shields.io/badge/size-29.9k-green.svg?style=flat-square)](https://github.com/stacktracejs/stacktrace.js/releases)\n[![gzip size](https://img.shields.io/badge/gzipped-9.1k-green.svg?style=flat-square)](https://github.com/stacktracejs/stacktrace.js/releases)\n[![module format](https://img.shields.io/badge/module%20format-umd-lightgrey.svg?style=flat-square&colorB=ff69b4)](https://github.com/stacktracejs/stacktrace.js/releases)\n\nDebug and profile your JavaScript with a [stack trace](http://en.wikipedia.org/wiki/Stack_trace) of function calls leading to an error (or any condition you specify).\n\nstacktrace.js uses browsers' `Error.stack` mechanism to generate stack traces, parses them, enhances them with\n[source maps](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/) and uses\n[Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\nto return an Array of [StackFrames](https://github.com/stacktracejs/stackframe).\n\n#### Upgrading? Check the [0.x -> 1.x Migration Guide](https://www.stacktracejs.com/#!/docs/v0-migration-guide)\n\n## Usage\n#### Get a stack trace from current location\n```js\nvar callback = function(stackframes) {\n    var stringifiedStack = stackframes.map(function(sf) {\n        return sf.toString();\n    }).join('\\n');\n    console.log(stringifiedStack);\n};\n\nvar errback = function(err) { console.log(err.message); };\n\nStackTrace.get().then(callback).catch(errback);\n//===> Promise(Array[StackFrame], Error)\n//===> callback([\n//    StackFrame({functionName: 'func1', args: [], fileName: 'file.js', lineNumber: 203, columnNumber: 9}), \n//    StackFrame({functionName: 'func2', args: [], fileName: 'http://localhost:3000/file.min.js', lineNumber: 1, columnNumber: 3284})\n//])\n```\n\n#### You can also get a stack trace synchronously\n**HEADS UP:** This method does not resolve source maps or guess anonymous function names.\n\n```js\nStackTrace.getSync();\n//==> [\n//      StackFrame({functionName: 'func1', args: [], fileName: 'file.js', lineNumber: 203, columnNumber: 9}), \n//      StackFrame({functionName: 'func2', args: [], fileName: 'http://localhost:3000/file.min.js', lineNumber: 1, columnNumber: 3284})\n//]\n```\n\n#### window.onerror integration\nAutomatically handle errors\n```js\nwindow.onerror = function(msg, file, line, col, error) {\n    // callback is called with an Array[StackFrame]\n    StackTrace.fromError(error).then(callback).catch(errback);\n};\n```\n\n#### Get stack trace from an Error\n```js\nvar error = new Error('BOOM!');\n\nStackTrace.fromError(error).then(callback).catch(errback);\n//===> Promise(Array[StackFrame], Error)\n```\n\n#### Generate a stacktrace from walking arguments.callee\nThis might capture arguments information, but isn't supported in ES5 strict-mode\n```js\nStackTrace.generateArtificially().then(callback).catch(errback);\n//===> Promise(Array[StackFrame], Error)\n```\n\n#### Trace every time a given function is invoked\n```js\n// callback is called with an Array[StackFrame] every time wrapped function is called\nvar myFunc = function(arg) { return 'Hello ' + arg; };\nvar myWrappedFunc = StackTrace.instrument(myFunc, callback, errback);\n//===> Instrumented Function\nmyWrappedFunc('world');\n//===> 'Hello world'\n\n// Use this if you overwrote you original function\nmyFunc = StackTrace.deinstrument(myFunc);\n//===> De-instrumented Function\n```\n\n## Get stacktrace.js\n```\nnpm install stacktrace-js\nbower install stacktrace-js\ncomponent install stacktracejs/stacktrace.js\nhttp://cdnjs.com/libraries/stacktrace.js\n```\n\n## API\n\n#### `StackTrace.get(/*optional*/ options)` => [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)(Array[[StackFrame](https://github.com/stacktracejs/stackframe)])\nGenerate a backtrace from invocation point, then parse and enhance it.\n\n**(Optional) options: Object**\n* *filter: Function([StackFrame](https://github.com/stacktracejs/stackframe) => Boolean)* - Only include stack entries matching for which `filter` returns `true`\n* *sourceCache: Object (String URL => String Source)* - Pre-populate source cache to avoid network requests\n* *offline: Boolean (default: false)* - Set to `true` to prevent all network requests\n\n#### `StackTrace.getSync(/*optional*/ options)` => Array[[StackFrame](https://github.com/stacktracejs/stackframe)]\nGenerate a backtrace from invocation point, then parse it. This method does not use source maps or guess anonymous functions.  \n\n**(Optional) options: Object**\n* *filter: Function([StackFrame](https://github.com/stacktracejs/stackframe) => Boolean)* - Only include stack entries matching for which `filter` returns `true`\n\n#### `StackTrace.fromError(error, /*optional*/ options)` => [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)(Array[[StackFrame](https://github.com/stacktracejs/stackframe)])\nGiven an Error object, use [error-stack-parser](https://github.com/stacktracejs/error-stack-parser)\nto parse it and enhance location information with [stacktrace-gps](https://github.com/stacktracejs/stacktrace-gps).\n\n**error: Error**\n\n**(Optional) options: Object**\n* *filter: Function([StackFrame](https://github.com/stacktracejs/stackframe) => Boolean)* - Only include stack entries matching for which `filter` returns `true`\n* *sourceCache: Object (String URL => String Source)* - Pre-populate source cache to avoid network requests\n* *offline: Boolean (default: false)* - Set to `true` to prevent all network requests\n\n#### `StackTrace.generateArtificially(/*optional*/ options)` => [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)(Array[[StackFrame](https://github.com/stacktracejs/stackframe)])\nUse [stack-generator](https://github.com/stacktracejs/stack-generator) to generate a backtrace by walking the `arguments.callee.caller` chain.\n\n**(Optional) options: Object**\n* *filter: Function([StackFrame](https://github.com/stacktracejs/stackframe) => Boolean)* - Only include stack entries matching for which `filter` returns `true`\n* *sourceCache: Object (String URL => String Source)* - Pre-populate source cache to avoid network requests\n* *offline: Boolean (default: false)* - Set to `true` to prevent all network requests\n\n#### `StackTrace.instrument(fn, callback, /*optional*/ errback)` => Function\n* Given a function, wrap it such that invocations trigger a callback that is called with a stack trace.\n\n* **fn: Function** - to wrap, call callback on invocation and call-through\n* **callback: Function** - to call with stack trace (generated by `StackTrace.get()`) when fn is called\n* **(Optional) errback: Function** - to call with Error object if there was a problem getting a stack trace.\nFails silently (though `fn` is still called) if a stack trace couldn't be generated.\n\n#### `StackTrace.deinstrument(fn)` => Function\nGiven a function that has been instrumented, revert the function to it's original (non-instrumented) state.\n\n* **fn: Function** - Instrumented Function\n\n#### `StackTrace.report(stackframes, url, message, requestOptions)` => [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)(String)\nGiven an an error message and Array of StackFrames, serialize and POST to given URL. Promise is resolved with response text from POST request.\n\nExample JSON POST data:\n```\n{\n  message: 'BOOM',\n  stack: [\n    {functionName: 'fn', fileName: 'file.js', lineNumber: 32, columnNumber: 1},\n    {functionName: 'fn2', fileName: 'file.js', lineNumber: 543, columnNumber: 32},\n    {functionName: 'fn3', fileName: 'file.js', lineNumber: 8, columnNumber: 1}\n  ]\n}\n```\n\n* **stackframes: Array([StackFrame](https://github.com/stacktracejs/stackframe))** - Previously wrapped Function\n* **url: String** - URL to POST stack JSON to\n* **message: String** - The error message\n* **requestOptions: Object** - HTTP request options object. Only `headers: {key: val}` is supported.\n\n## Browser Support\n[![Sauce Test Status](https://saucelabs.com/browser-matrix/stacktracejs.svg)](https://saucelabs.com/u/stacktracejs)\n\n> **HEADS UP**: You won't get the benefit of [source maps](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/)\nin IE9- or other very old browsers.\n\n## Using node.js/io.js only?\nI recommend the [stack-trace node package](https://www.npmjs.com/package/stack-trace) specifically built for node.\nIt has a very similar API and also supports source maps.\n\n## Contributing\nThis project adheres to the [Open Code of Conduct](http://todogroup.org/opencodeofconduct/#stacktrace.js/me@eriwen.com). By participating, you are expected to honor this code.\n\nWant to be listed as a *Contributor*? Start with the [Contributing Guide](https://github.com/stacktracejs/stacktrace.js/blob/master/.github/CONTRIBUTING.md)!\n\nThis project is made possible due to the efforts of these fine people:\n\n* [Eric Wendelin](https://www.eriwen.com)\n* [Victor Homyakov](https://github.com/victor-homyakov)\n* [Oliver Salzburg](https://github.com/oliversalzburg)\n* [Many others](https://github.com/stacktracejs/stacktrace.js/graphs/contributors)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/stacktracejs/stacktrace.js.git"
  },
  "scripts": {
    "prepublish": "gulp dist",
    "test": "gulp test"
  },
  "version": "2.0.0"
}
