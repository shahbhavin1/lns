{
  "_args": [
    [
      {
        "raw": "jssha@^2.1.0",
        "scope": null,
        "escapedName": "jssha",
        "name": "jssha",
        "rawSpec": "^2.1.0",
        "spec": ">=2.1.0 <3.0.0",
        "type": "range"
      },
      "/Users/bhavinshah/hyper2/loan-network/node_modules/fabric-ca-client"
    ]
  ],
  "_from": "jssha@>=2.1.0 <3.0.0",
  "_id": "jssha@2.3.1",
  "_inCache": true,
  "_location": "/jssha",
  "_nodeVersion": "4.2.6",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/jssha-2.3.1.tgz_1497081058017_0.8382039444986731"
  },
  "_npmUser": {
    "name": "caligatio",
    "email": "brian.turek@gmail.com"
  },
  "_npmVersion": "3.5.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "jssha@^2.1.0",
    "scope": null,
    "escapedName": "jssha",
    "name": "jssha",
    "rawSpec": "^2.1.0",
    "spec": ">=2.1.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/fabric-ca-client",
    "/fabric-client"
  ],
  "_resolved": "https://registry.npmjs.org/jssha/-/jssha-2.3.1.tgz",
  "_shasum": "147b2125369035ca4b2f7d210dc539f009b3de9a",
  "_shrinkwrap": null,
  "_spec": "jssha@^2.1.0",
  "_where": "/Users/bhavinshah/hyper2/loan-network/node_modules/fabric-ca-client",
  "author": {
    "name": "Brian Turek",
    "email": "brian.turek@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/Caligatio/jsSHA/issues"
  },
  "dependencies": {},
  "description": "jsSHA is a JavaScript implementation of the complete Secure Hash Standard family (SHA-1, SHA-224, SHA3-224, SHA-256, SHA3-256, SHA-384, SHA3-384, SHA-512, SHA3-512, SHAKE128, and SHAKE256) as well as HMAC",
  "devDependencies": {
    "chai": "^3.5.0",
    "mocha": "^2.5.3"
  },
  "directories": {},
  "dist": {
    "shasum": "147b2125369035ca4b2f7d210dc539f009b3de9a",
    "tarball": "https://registry.npmjs.org/jssha/-/jssha-2.3.1.tgz"
  },
  "engines": {
    "node": "*"
  },
  "gitHead": "20e15fd5975e3a83b040d150cc2a2e244a61a9ea",
  "homepage": "https://github.com/Caligatio/jsSHA",
  "keywords": [
    "SHA-1",
    "SHA-224",
    "SHA3-224",
    "SHA-256",
    "SHA3-256",
    "SHA-384",
    "SHA3-384",
    "SHA-512",
    "SHA3-512",
    "SHAKE-128",
    "SHAKE-256",
    "SHAKE128",
    "SHAKE256",
    "SHA1",
    "SHA224",
    "SHA256",
    "SHA384",
    "SHA512",
    "SHA-2",
    "SHA2",
    "SHA-3",
    "SHA3",
    "SHAKE",
    "HMAC",
    "hash"
  ],
  "license": "BSD-3-Clause",
  "main": "src/sha.js",
  "maintainers": [
    {
      "name": "caligatio",
      "email": "brian.turek@gmail.com"
    }
  ],
  "name": "jssha",
  "optionalDependencies": {},
  "readme": "# jsSHA\nA pure JavaScript streaming implementation of the complete Secure Hash Standard\nfamily (SHA-1, SHA-224, SHA3-224, SHA-256, SHA3-256, SHA-384, SHA3-384, SHA-512,\nSHA3-512, SHAKE128, and SHAKE256) as well as HMAC.\n\n[![Build Status](https://travis-ci.org/Caligatio/jsSHA.svg?branch=master)](https://travis-ci.org/Caligatio/jsSHA)\n\n## Usage\n\n### Installation\n#### Browser\nInclude the desired JavaScript file (sha.js, sha1.js, sha256.js, sha512.js, or\nsha3.js) in your header (sha.js used below):\n\n    <script type=\"text/javascript\" src=\"/path/to/sha.js\"></script>\n\n#### Node.js\njsSHA is available through NPM and be installed by simply doing\n\n    npm install jssha\n\nTo use the module, first require it using:\n\n    jsSHA = require(\"jssha\");\n\n\n### Hashing\nInstantiate a new jsSHA object with the desired hash type, input type, and\noptions as parameters.  The hash type can be one of SHA-1, SHA-224, SHA3-224,\nSHA-256, SHA3-256, SHA-384, SHA3-384, SHA-512, SHA3-512, SHAKE128, or SHAKE256.\nThe input type can be one of HEX, TEXT, B64, BYTES, or ARRAYBUFFER.  You can\nthen stream in input using the `update` object function, calling it multiple\ntimes if needed.  Finally, simply call `getHash` with the output type as a\nparameter (B64, HEX, BYTES, or ARRAYBUFFER).  Example to calculate the SHA-512\nof \"This is a test\":\n\n    var shaObj = new jsSHA(\"SHA-512\", \"TEXT\");\n    shaObj.update(\"This is a \");\n    shaObj.update(\"test\");\n    var hash = shaObj.getHash(\"HEX\");\n\nThe constructor takes a hashmap as a optional third argument with possible\nproperties of `numRounds` and `encoding`.  `numRounds` controls the number of\nhashing iterations/rounds performed and defaults to a value of 1 if not\nspecified. `encoding` specifies the encoding used to encode TEXT-type inputs.\nValid options are \"UTF8\", \"UTF16BE\", and \"UTF16LE\", it defaults to \"UTF8\".\n\n`getHash` also takes a hashmap as an optional second argument.  By default the\nhashmap is `{\"outputUpper\" : false, \"b64Pad\" : \"=\"}`.  These options are\nintelligently interpreted based upon the chosen output format. **Important**:\nSHAKE128 and SHAKE256 require `shakeLen` to be included in the hashmap where\n`shakeLen` is the desired output length of the SHAKE algorithm in a multiple\nof 8 bits.\n\n### HMAC\nInstantiate a new jsSHA object the same way as for hashing.  Then set the HMAC\nkey to be used by calling `setHMACKey` with the key and its input type (this\nMUST be done before calling update).  You can stream in the input using the\n`update` object function just like hashing.  Finally, get the HMAC by calling\nthe `getHMAC` function with the output type as its argument.  Example to\ncalculate the SHA-512 HMAC of the string \"This is a test\" with the key \"abc\":\n\n    var shaObj = new jsSHA(\"SHA-512\", \"TEXT\");\n    shaObj.setHMACKey(\"abc\", \"TEXT\");\n    shaObj.update(\"This is a \");\n    shaObj.update(\"test\");\n    var hmac = shaObj.getHMAC(\"HEX\");\n\n`setHMACKey` takes the same input types as the constructor and `getHMAC` takes the\nsame inputs as `getHash` as described above.\n\nNote: You cannot calculate both the hash and HMAC using the same object.\n\n## Files\n**src/sha\\_dev.js**\n\nA commented implementation of the entire SHA family of hashes. Not to be used\nin production.\n\n**src/sha.js**\n\nA Google Closure Compiler optimized version of the entire library.\n\n**src/sha1.js**\n\nA Google Closure Compiler optimized version the library with non SHA-1\nfunctionality removed.\n\n**src/sha256.js**\n\nA Google Closure Compiler optimized version the library with non SHA-224/SHA-256\nfunctionality removed.\n\n**src/sha3.js**\n\nA Google Closure Compiler optimized version the library with non SHA-3\nfunctionality removed.\n\n**src/sha512.js**\n\nA Google Closure Compiler optimized version the library with non SHA-384/SHA-512\nfunctionality removed.\n\n## Compiling\nThis library makes use of the [Google Closure Compiler](https://developers.google.com/closure/compiler)\nto both boost performance and reduce filesizes.  To compile sha\\_dev.js into a customized output file,\nuse a command like the following:\n\n    java -jar compiler.jar --define=\"SUPPORTED_ALGS=<FLAG>\" \\\n        --externs /path/to/build/externs.js --warning_level VERBOSE \\\n        --compilation_level ADVANCED_OPTIMIZATIONS \\\n        --js /path/to/sha_dev.js --js_output_file /path/to/sha.js\n\nwhere FLAG is a bitwise OR of the following values:\n\n* 8 for SHA3\n* 4 for SHA-384/SHA-512\n* 2 for SHA-224/256\n* 1 for SHA-1\n\n## Contact Info\nThe project's website is located at [https://caligatio.github.com/jsSHA/](https://caligatio.github.com/jsSHA/)\n\n## Donations\nFeel like donating?  We're now accepting donations through [Pledgie](https://pledgie.com/campaigns/31646) and [Bitcoin](bitcoin:12VMZgRAP2jCP1YCR3vFNAtLR9MvzHzJZb?message=jsSHA%20Donation)!\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Caligatio/jsSHA.git"
  },
  "scripts": {
    "test": "mocha --reporter spec"
  },
  "version": "2.3.1"
}
