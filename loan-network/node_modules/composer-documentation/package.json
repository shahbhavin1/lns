{
  "_args": [
    [
      {
        "raw": "composer-documentation@0.19.9",
        "scope": null,
        "escapedName": "composer-documentation",
        "name": "composer-documentation",
        "rawSpec": "0.19.9",
        "spec": "0.19.9",
        "type": "version"
      },
      "/Users/bhavinshah/hyper2/loan-network/node_modules/composer-cli"
    ]
  ],
  "_from": "composer-documentation@0.19.9",
  "_id": "composer-documentation@0.19.9",
  "_inCache": true,
  "_location": "/composer-documentation",
  "_nodeVersion": "8.11.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/composer-documentation_0.19.9_1528976109832_0.6752952840623836"
  },
  "_npmUser": {
    "name": "hyperledger-ci",
    "email": "collab-it+hyp+ci@linuxfoundation.org"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {
    "cliui": "3.2.0",
    "decamelize": "1.2.0",
    "execa": "0.7.0",
    "find-up": "2.1.0",
    "get-caller-file": "1.0.2",
    "glob": "7.1.2",
    "lcid": "1.0.0",
    "mem": "1.1.0",
    "require-directory": "2.1.1",
    "require-main-filename": "1.0.1",
    "set-blocking": "2.0.0",
    "which-module": "2.0.0",
    "y18n": "3.2.1",
    "yargs-parser": "8.1.0"
  },
  "_requested": {
    "raw": "composer-documentation@0.19.9",
    "scope": null,
    "escapedName": "composer-documentation",
    "name": "composer-documentation",
    "rawSpec": "0.19.9",
    "spec": "0.19.9",
    "type": "version"
  },
  "_requiredBy": [
    "/composer-cli"
  ],
  "_resolved": "https://registry.npmjs.org/composer-documentation/-/composer-documentation-0.19.9.tgz",
  "_shasum": "2a9bfc27888f1aaa10034c190d791ec74d797151",
  "_shrinkwrap": null,
  "_spec": "composer-documentation@0.19.9",
  "_where": "/Users/bhavinshah/hyper2/loan-network/node_modules/composer-cli",
  "author": {
    "name": "MBW"
  },
  "bin": {
    "opus": "bin/opus"
  },
  "dependencies": {
    "chalk": "1.1.3",
    "comment-parser": "0.4.0",
    "composer-admin": "0.19.9",
    "composer-client": "0.19.9",
    "composer-common": "0.19.9",
    "debug-stream": "3.0.1",
    "doctrine": "2.0.0",
    "js-yaml": "3.10.0",
    "lodash": "4.17.4",
    "lodash.clonedeep": "4.5.0",
    "map-stream": "0.1.0",
    "markdown-it": "8.4.0",
    "markdown-it-anchor": "4.0.0",
    "mkdirp": "0.5.1",
    "nunjucks": "3.0.1",
    "ora": "1.2.0",
    "prettyoutput": "1.1.1",
    "rimraf": "2.5.4",
    "vinyl-fs": "2.4.4",
    "yargs": "10.0.3"
  },
  "description": "Generates documentation packages for Hyperlegder Composer Business Networks",
  "devDependencies": {
    "chai": "3.5.0",
    "chai-as-promised": "6.0.0",
    "chai-things": "0.2.0",
    "eslint": "3.17.1",
    "folder-zip-sync": "1.0.4",
    "jsdoc": "3.5.5",
    "license-check-and-add": "2.3.1",
    "mocha": "3.4.2",
    "mockery": "2.0.0",
    "moxios": "0.4.0",
    "nyc": "11.1.0",
    "pegjs": "0.9.0",
    "sinon": "2.3.8"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-OtcJu8iCGKezzdPl734l8L4lGLcGynjH0mfBY04xqpWqvnft+ZnOE+1advoE0OX+WFbBleMnrah1107291NV3Q==",
    "shasum": "2a9bfc27888f1aaa10034c190d791ec74d797151",
    "tarball": "https://registry.npmjs.org/composer-documentation/-/composer-documentation-0.19.9.tgz",
    "fileCount": 107,
    "unpackedSize": 3221013,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbIlLuCRA9TVsSAnZWagAANhQP/2UJQqPJcK5YF0D0AeVd\nxBMzBEk4tIzDgvUcyFcmIAu6tIU7IPx6ex9FdGnz1t4/PxpyLx+7ZNqaRc7N\nWWysnScZXx8StgoN4oVRWfRqENDMQsJk435ZHvgbytCdM9ng77+gbbCEfWyL\nWCoX2e9/mLJsO4Xuf9UDoSW/XgNzXJQSJaiy17+5+5t6cMb9XODT9GF/BCPD\nPAZuSIVg2xL1dMDV8dPNWQNdUCFOXwamhchh3m+G/ox/yeXkaGhtH3MmeToU\nE4y9+nUawAZIkLEJTIziqnzFfcrHxoJ40vjzKPBdOl2Fo9+zRchrkTYlalGt\nTbw0V1iV83h+EyPnfwNlhEWwevRjw2tq+GgFwlZo5VmMQ+nS0xOl5Tm8TYYN\n08YUhyipoAbwWrb9oEZ4Wf0v6JnQKAyO2Q+C6BdiXWipcAHRvMY+vzsItBE4\nta0lCXRuc4UGCNtRTaV6azzLH7gBdRfuJZ2nhfKkF6bSRW1/yChV1GgrsFcB\nd/vL+sYZMlJm7lZkQKkH9YucIWk/6V9ec12GtkR5BT/CIYismZdPHlO4k4tD\naBHMkCvm2X7atz+uAB+aaxj/jD2E0QA4a60+M6wX+ORIhvrpqH27NwJLBrQ6\neiCE24yuUITqwdcvkPDayugNfIGqfm5qn8oFV4+mLgGIp2Iqpu6x2T+KgM1Q\n7Nha\r\n=soUJ\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "keywords": [],
  "license": "Apache-2",
  "license-check-and-add-config": {
    "folder": ".",
    "license": "LICENSE.txt",
    "exact_paths_method": "EXCLUDE",
    "exact_paths": [
      "coverage",
      "node_modules",
      "lib/processors/parsers",
      "out",
      "_bnaTemplate/assets.default/js",
      "_configs",
      "_template/assets.default",
      "bin/opus",
      "test/testfile.md",
      "_tmp"
    ],
    "file_type_method": "EXCLUDE",
    "file_types": [
      ".yml",
      ".bna",
      ".css"
    ],
    "insert_license": false,
    "license_formats": {
      "js|pegjs|scss": {
        "prepend": "/*",
        "append": " */",
        "eachLine": {
          "prepend": " * "
        }
      },
      "njk": {
        "prepend": "{#",
        "append": "#}"
      },
      "md": {
        "file": "../../markdown-license.txt"
      }
    }
  },
  "main": "index.js",
  "maintainers": [
    {
      "name": "hyperledger-ci",
      "email": "collab-it+hyp+ci@linuxfoundation.org"
    }
  ],
  "name": "composer-documentation",
  "nyc": {
    "exclude": [
      "coverage/**",
      "lib/processors/parsers/**",
      "out/**",
      "scripts/**",
      "systest/**",
      "test/**",
      "_bnaTemplate/**",
      "_configs/**",
      "_template/**"
    ],
    "reporter": [
      "text-summary",
      "html"
    ],
    "all": true,
    "check-coverage": true,
    "statements": 100,
    "branches": 100,
    "functions": 100,
    "lines": 100
  },
  "optionalDependencies": {},
  "readme": "# Hyperledger Composer Opus\n\nA Proof-Of-Idea to see if the power of template engines, plus the Introspector API, and the NPM meta-data in a BusinessNeworkArchive could be used to generate a set of documentation for the archive.\n\nThis introspection of all the model files etc to get a set of data that can be then transformed into the desired output.\n\n\n\nAll the information is captured so the next step is (a) produce a set of established decorators such as \n\n```\n@docs('This is some docs')\nassert fred indetified by id {\n  @docs('the primary key')\n  o String id\n}\n```\n\nThat can be used to provide more in-depth documentation\n\n## Example\n\nBest seen with an example.... [https://ampretia.github.io/composer-opus/](https://ampretia.github.io/composer-opus/)\n\n## Usage\n```\n$ npm install -g @ampretia/composer-opus\n$ opus\nOptions:\n  -a, --archive  Archive file to document                    [string] [required]\n  -o, --outdir   Output Directory                    [string] [default: \"./out\"]\n  -c, --config   path to the configuration file[string] [default: \"config.yaml\"]\n  --help         Show help                                             [boolean]\n\n```\n\nThere is a default template and set of structure already defined as a default. This could be customized to suit and it is not restricted to handling markdown and \nhtml.\n\n## Configuration\nThe example site was produced with this configuration file - this is in yaml format as the flow through the system is hierarchical\n\n```yaml\n--- \ntasks:\n    #  Root task that defines common data for all tasks\n    taskid : root\n    processor : root\n    options :\n        outputdir : ${_args.outdir}\n        templateroot: ${default.template}\n        tempdir : ${default.temp}     \n    subtasks :\n    #  Use Hyperledger Composer taks to extract all information and setup the context\n    -   taskid : ParseNetwork\n        processor : composernetwork\n        options :\n            archive : \"${_args.archive}\"   \n    #  Uses multiple templates specified in 'inputdir' & 'pattern' to work on the context and produce markdown output files\n    -   taskid : CreateMarkdown\n        processor : njk_multi\n        options :\n            inputdir : \"phase1-markdown\"\n            pattern : \"**/*.njk\"\n            outputextension : \".md\"\n            outputdir : \"${root.tempdir}\"\n       \n    # From the markdown files that are created previously generate html\n    # This is a two step process, files needs to converted into html and then wrapped in\n    # the correct header/footer etc. Stream tasks allows the output from one task to go into the second\n    -   taskid : HTML\n        processor: stream\n        options :\n            inputdir : \"${root.tempdir}\"\n            pattern : \"**/*.md\"\n            outputdir : \"${_args.outdir}\"\n            streamId : html1          \n        subtasks :\n            # For each markdown file stream into it this will convert into html and pass on the details via the stream\"          \n            -   taskid : markdownhtml\n                processor : markdownit\n            # Single template to be used to process files via stream along with the context\n            -   taskid : htmlrender\n                processor : njk_single\n                options :\n                    inputdir : \"phase2-html\"\n                    template : html.default.njk\n                    extension: \".html\"\n    # Finally need to copy the fixed assets to the output directory \"\n    -   taskid : FinalStep\n        processor : copy\n        options :\n            srcdir : \"${root.templateroot}/assets.default/**/*\" \n            destdir : \"${_args.outdir}/assets\"  \n         \n\n```\n\n## Details\nAt first glance this is complex, but let's break it down bit by bit. The basic idea is there is a sequence of tasks that will be executed in order. These can form a tree so that it is possible to group the tasks.\n\n```yaml\n--- \ntasks:\n    #  Root task that defines common data for all tasks\n    taskid : root\n    processor : root\n    options :\n        outputdir : ${_args.outdir}\n        templateroot: ${default.template}\n        tempdir : ${default.temp}     \n    subtasks :\n```\n\nThis defines the top level tasks - identified by *taskid* and the *processor* that will be used to handle this task\n\n> Each task needs a *taskid* and a *processor*\n\nThis takes some options, namely the *outputdir*, *templateroot* and *tempdir*. These are standard and best left as is. Note the `${_args.outdir}` is taking the output directory from the command line options.\n\nSub tasks can be defined and appear under the *subtasks*\n\n```yaml\n\n    #  Use Hyperledger Composer taks to extract all information and setup the context\n    -   taskid : ParseNetwork\n        processor : composernetwork\n        options :\n            archive : \"${_args.archive}\"   \n```\n\nThis is the first subtasked processed using the *composernetwork* processor. This takes the archive specified on the command line and processes it to extract all the data. This is held in an internal 'context'\n\nThis tasks has no subtasks, so execution moves on.\n\n```yaml\n    #  Uses multiple templates specified in 'inputdir' & 'pattern' to work on the context and produce markdown output files\n    -   taskid : CreateMarkdown\n        processor : njk_multi\n        options :\n            inputdir : \"phase1-markdown\"\n            pattern : \"**/*.njk\"\n            outputextension : \".md\"\n            outputdir : \"${root.tempdir}\"\n```\nA more complex task,but this uses the *njk_multi* processor. Using [nunjucks](https://mozilla.github.io/nunjucks/) a set of templates are processed against the internal context to generate a set of markdown files. \n\nThe options determine where these are (all relative paths such as the *inputdir* are rooted at the *templateroot* seen earlier on).\n\nThe output of these files is stored in a temporary location.\n\nNote that the output of these files is markdown format because (a) that's what the template is set up to produce and (b) because of the extension specified in the options.\n\nAgain this task has no subtasks\n\n```yaml\n    # From the markdown files that are created previously generate html\n    # This is a two step process, files needs to converted into html and then wrapped in\n    # the correct header/footer etc. Stream tasks allows the output from one task to go into the second\n    -   taskid : HTML\n        processor: stream\n        options :\n            inputdir : \"${root.tempdir}\"\n            pattern : \"**/*.md\"\n            outputdir : \"${_args.outdir}\"\n            streamid : html1          \n        subtasks :\n            # For each markdown file stream into it this will convert into html and pass on the details via the stream\"          \n            -   taskid : markdownhtml\n                processor : markdownit\n            # Single template to be used to process files via stream along with the context\n            -   taskid : htmlrender\n                processor : njk_single\n                options :\n                    inputdir : \"phase2-html\"\n                    template : html.default.njk\n                    extension: \".html\"\n```\nThis is the most complex task and makes use of the ability to group tasks together. The aim here is to take the markdown files produced previously, and render these as html. This is a two stage process. First the files need converting from markdown to html, and then the core html needs to be wrapped in headers, footers etc. \n\nThis is accomplished by a using a *stream* tasks. This takes inputdir, patter, and an outputdir. It reads all the input, passes it to the first subtask, gets the output, passes it to the next subtask before writing it all to the output dir.\n\nThe first subtask (markdownhtml) does the conversion of each markdown file read into html. \nThe second subtask (htmlrender) again uses nunjucks but this is using a single template to transform input to output (basically adding the header)\n\n```yaml\n    # Finally need to copy the fixed assets to the output directory \"\n    -   taskid : FinalStep\n        processor : copy\n        options :\n            srcdir : \"${root.templateroot}/assets.default/**/*\" \n            destdir : \"${_args.outdir}/assets\"  \n```\n\nFinal step is a copy to move the 'assets' i.e. css files into the correct location.\n\n## License <a name=\"license\"></a>\nHyperledger Project source code files are made available under the Apache License, Version 2.0 (Apache-2.0), located in the LICENSE file. Hyperledger Project documentation files are made available under the Creative Commons Attribution 4.0 International License (CC-BY-4.0), available at http://creativecommons.org/licenses/by/4.0/.",
  "readmeFilename": "README.md",
  "scripts": {
    "licchk": "license-check-and-add",
    "lint": "eslint .",
    "mocha": "mocha --recursive -t 10000",
    "nyc": "nyc mocha --recursive -t 10000",
    "postlint": "npm run licchk",
    "pretest": "pegjs  ./lib/grammar/modelfile-cmts.pegjs ./lib/processors/parsers/modelfile-cmts.js && npm run lint",
    "systemnsDocs": "./bin/opus --archive dummy.bna --outdir ./out --config ./_configs/sns-config.yaml --nsDocsRoot=../composer-common/lib/system/",
    "test": "nyc mocha --recursive -t 10000"
  },
  "version": "0.19.9"
}
