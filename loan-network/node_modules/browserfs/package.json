{
  "_args": [
    [
      {
        "raw": "browserfs@1.1.0",
        "scope": null,
        "escapedName": "browserfs",
        "name": "browserfs",
        "rawSpec": "1.1.0",
        "spec": "1.1.0",
        "type": "version"
      },
      "/Users/bhavinshah/hyper2/loan-network/node_modules/composer-cucumber-steps"
    ]
  ],
  "_from": "browserfs@1.1.0",
  "_id": "browserfs@1.1.0",
  "_inCache": true,
  "_location": "/browserfs",
  "_nodeVersion": "6.7.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/browserfs-1.1.0.tgz_1478384768624_0.9692096917424351"
  },
  "_npmUser": {
    "name": "jvilk",
    "email": "jvilk@cs.umass.edu"
  },
  "_npmVersion": "3.10.7",
  "_phantomChildren": {},
  "_requested": {
    "raw": "browserfs@1.1.0",
    "scope": null,
    "escapedName": "browserfs",
    "name": "browserfs",
    "rawSpec": "1.1.0",
    "spec": "1.1.0",
    "type": "version"
  },
  "_requiredBy": [
    "/composer-cucumber-steps"
  ],
  "_resolved": "https://registry.npmjs.org/browserfs/-/browserfs-1.1.0.tgz",
  "_shasum": "043f74e0be56e40ed5c51df1d72019ee6fd1fb8b",
  "_shrinkwrap": null,
  "_spec": "browserfs@1.1.0",
  "_where": "/Users/bhavinshah/hyper2/loan-network/node_modules/composer-cucumber-steps",
  "author": {
    "name": "John Vilk",
    "email": "jvilk@cs.umass.edu",
    "url": "http://people.cs.umass.edu/~jvilk"
  },
  "bin": {
    "make_xhrfs_index": "./dist/scripts/make_xhrfs_index.js"
  },
  "bugs": {
    "url": "https://github.com/jvilk/BrowserFS/issues"
  },
  "dependencies": {
    "async": "^2.0.1",
    "pako": "^1.0.0"
  },
  "description": "A filesystem in your browser!",
  "devDependencies": {
    "@types/archiver": "^0.15.33",
    "@types/async": "^2.0.32",
    "@types/dropboxjs": "0.0.29",
    "@types/filesystem": "0.0.28",
    "@types/mocha": "^2.2.32",
    "@types/node": "6.0.33",
    "@types/rimraf": "0.0.28",
    "archiver": "^1.0.1",
    "async-es": "^2.0.1",
    "bfs-path": "^0.1.2",
    "bfs-process": "^0.1.6",
    "buffer": "^5.0.0",
    "detect-browsers": "^2.0.0",
    "dropbox": "^0.10.3",
    "express": "^4.14.0",
    "karma": "1.3.0",
    "karma-chrome-launcher": "^2.0.0",
    "karma-coverage": "^1.1.1",
    "karma-firefox-launcher": "^1.0.0",
    "karma-ie-launcher": "^1.0.0",
    "karma-mocha": "^1.2.0",
    "karma-opera-launcher": "^1.0.0",
    "karma-safari-launcher": "^1.0.0",
    "mocha": "^3.1.1",
    "npm-run-all": "^3.1.1",
    "object-wrapper": "^0.2.0",
    "remap-istanbul": "^0.6.4",
    "rimraf": "^2.5.4",
    "rollup": "^0.36.3",
    "rollup-plugin-alias": "^1.2.0",
    "rollup-plugin-buble": "^0.14.0",
    "rollup-plugin-inject": "^2.0.0",
    "rollup-plugin-node-resolve": "^2.0.0",
    "rollup-plugin-sourcemaps": "^0.4.1",
    "rollup-watch": "^2.5.0",
    "source-map-loader": "^0.1.5",
    "tslint": "^3.15.1",
    "typescript": "^2.0.3",
    "webpack": "^1.13.2",
    "webpack-dev-server": "^1.16.2"
  },
  "directories": {},
  "dist": {
    "shasum": "043f74e0be56e40ed5c51df1d72019ee6fd1fb8b",
    "tarball": "https://registry.npmjs.org/browserfs/-/browserfs-1.1.0.tgz"
  },
  "engines": {
    "node": ">= 0.10"
  },
  "gitHead": "40f33f823260e133c66fc25c90dc6df09e773268",
  "homepage": "https://github.com/jvilk/BrowserFS",
  "keywords": [
    "filesystem",
    "node",
    "storage"
  ],
  "license": "MIT",
  "main": "dist/browserfs.js",
  "maintainers": [
    {
      "name": "jvilk",
      "email": "jvilk@cs.umass.edu"
    }
  ],
  "name": "browserfs",
  "optionalDependencies": {},
  "readme": "# BrowserFS v1.1.0\n> BrowserFS is an in-browser file system that emulates the [Node JS file system API](http://nodejs.org/api/fs.html) and supports storing and retrieving files from various backends. BrowserFS also integrates nicely into the Emscripten file system.\n\n[![Build Status](https://travis-ci.org/jvilk/BrowserFS.svg?branch=master)](https://travis-ci.org/jvilk/BrowserFS)\n[![Build Status](https://ci.appveyor.com/api/projects/status/bammh2x1bud8h7a5/branch/master?svg=true)](https://ci.appveyor.com/project/jvilk/browserfs/branch/master)\n[![NPM version](https://badge.fury.io/js/browserfs.svg)](http://badge.fury.io/js/browserfs)\n[![david-dm-status-badge](https://david-dm.org/jvilk/BrowserFS.svg)](https://david-dm.org/jvilk/browserfs#info=dependencies&view=table)\n[![david-dm-status-badge](https://david-dm.org/jvilk/BrowserFS/dev-status.svg)](https://david-dm.org/jvilk/BrowserFS#info=devDependencies&view=table)\n\n### Backends\n\nBrowserFS is highly extensible, and ships with many filesystem backends:\n\n* `XmlHttpRequest`: Downloads files on-demand from a webserver via `XMLHttpRequest`\n* `LocalStorage`: Stores files in the browser's `localStorage`.\n* `HTML5FS`: Stores files into the HTML5 `FileSystem` API\n* `IndexedDB`: Stores files into the browser's `IndexedDB` object database.\n* `Dropbox`: Stores files into the user's Dropbox account.\n  * Note: You provide this filesystem with an authenticated [DropboxJS client](https://github.com/dropbox/dropbox-js)\n* `InMemory`: Stores files in-memory. Thus, it is a temporary file store that clears when the user navigates away.\n* `ZipFS`: Read-only zip file-backed FS. Lazily decompresses files as you access them.\n  * Supports DEFLATE out-of-the-box.\n  * Have super old zip files? [The `browserfs-zipfs-extras` package](https://github.com/jvilk/browserfs-zipfs-extras) adds support for EXPLODE, UNREDUCE, and UNSHRINK.\n* `WorkerFS`: Lets you mount the BrowserFS file system configured in the main thread in a WebWorker, or the other way around!\n* `MountableFileSystem`: Lets you mount multiple file systems into a single directory hierarchy, as in *nix-based OSes.\n* `OverlayFS`: Mount a read-only file system as read-write by overlaying a writable file system on top of it. Like Docker's overlayfs, it will only write changed files to the writable file system.\n* `AsyncMirrorFS`: Use an asynchronous backend synchronously. Invaluable for Emscripten; let your Emscripten applications write to larger file stores with no additional effort!\n  * Note: Loads the entire contents of the file system into a synchronous backend during construction. Performs synchronous operations in-memory, and enqueues them to be mirrored onto the asynchronous backend.\n* `FolderAdapter`: Wraps a file system, and scopes all interactions to a subfolder of that file system.\n* `Emscripten`: Lets you mount Emscripten file systems inside BrowserFS.\n\nMore backends can be defined by separate libraries, so long as they extend the `BaseFileSystem`. Multiple backends can be active at once at different locations in the directory hierarchy.\n\nFor more information, see the [wiki](https://github.com/jvilk/BrowserFS/wiki).\n\n### Building\n\nPrerequisites:\n\n* Node and NPM\n* Run `npm install` to install local dependencies\n\nBuild:\n\n    npm run dist\n\nA minified build can be found in `dist/browserfs.min.js`, and the unminified build can be found in `dist/browserfs.js`.\n\nCustom builds:\n\nIf you want to build BrowserFS with a subset of the available backends,\nchange `src/core/backends.ts` to include only the backends you require,\nand re-build.\n\n### Using\n\nHere's a simple usage example using the LocalStorage-backed file system:\n\n```html\n<script type=\"text/javascript\" src=\"browserfs.min.js\"></script>\n<script type=\"text/javascript\">\n  // Installs globals onto window:\n  // * Buffer\n  // * require (monkey-patches if already defined)\n  // * process\n  // You can pass in an arbitrary object if you do not wish to pollute\n  // the global namespace.\n  BrowserFS.install(window);\n  // Constructs an instance of the LocalStorage-backed file system.\n  var lsfs = new BrowserFS.FileSystem.LocalStorage();\n  // Initialize it as the root file system.\n  BrowserFS.initialize(lsfs);\n</script>\n```\n\nNow, you can write code like this:\n\n```js\nvar fs = require('fs');\nfs.writeFile('/test.txt', 'Cool, I can do this in the browser!', function(err) {\n  fs.readFile('/test.txt', function(err, contents) {\n    console.log(contents.toString());\n  });\n});\n```\n\n### Using with Browserify and Webpack\n\nBrowserFS is published as a UMD module, so you can either include it on your webpage in a `script` tag or bundle it with your favorite\nJavaScript module bundler.\n\nYou can also use BrowserFS to supply your application with `fs`, `path`, and `buffer` modules, as well as the `Buffer` and `process`\nglobals. BrowserFS contains shim modules for `fs`, `buffer`, `path`, and `process` that you can use with Webpack and Browserify.\n\nWebpack:\n\n```javascript\nmodule.exports = {\n  resolve: {\n    // Use our versions of Node modules.\n    alias: {\n      'fs': 'browserfs/dist/shims/fs.js',\n      'buffer': 'browserfs/dist/shims/buffer.js',\n      'path': 'browserfs/dist/shims/path.js',\n      'processGlobal': 'browserfs/dist/shims/process.js',\n      'bufferGlobal': 'browserfs/dist/shims/bufferGlobal.js',\n      'bfsGlobal': require.resolve('browserfs')\n    }\n  },\n  plugins: [\n    // Expose BrowserFS, process, and Buffer globals.\n    // NOTE: If you intend to use BrowserFS in a script tag, you do not need\n    // to expose a BrowserFS global.\n    new webpack.ProvidePlugin({ BrowserFS: 'bfsGlobal', process: 'processGlobal', Buffer: 'bufferGlobal' })\n  ],\n  // DISABLE Webpack's built-in process and Buffer polyfills!\n  node: {\n    process: false,\n    Buffer: false\n  }\n};\n```\n\nBrowserify:\n\n```javascript\nvar browserfsPath = require.resolve('browserfs');\nvar browserifyConfig = {\n  // Override Browserify's builtins for buffer/fs/path.\n  builtins: Object.assign({}, require('browserify/lib/builtins'), {\n    \"buffer\": require.resolve('browserfs/dist/shims/buffer.js'),\n    \"fs\": require.resolve(\"browserfs/dist/shims/fs.js\"),\n    \"path\": require.resolve(\"browserfs/dist/shims/path.js\")\n  }),\n  insertGlobalVars: {\n    // process, Buffer, and BrowserFS globals.\n    // BrowserFS global is not required if you include browserfs.js\n    // in a script tag.\n    \"process\": function () { return \"require('browserfs/dist/shims/process.js')\" },\n    'Buffer': function () { return \"require('buffer').Buffer\" },\n    \"BrowserFS\": function() { return \"require('\" + browserfsPath + \"')\" }\n  }\n};\n```\n\n### Using with Node\n\nYou can use BrowserFS with Node. Simply add `browserfs` as an NPM dependency, and `require('browserfs')`.\nThe object returned from this action is the same `BrowserFS` global described above.\n\nIf you need BrowserFS to return Node Buffer objects (instead of objects that implement the same interface),\nsimply `require('browserfs/dist/node/main')` instead.\n\n### Using with Emscripten\n\nYou can use any *synchronous* BrowserFS file systems with Emscripten!\nPersist particular folders in the Emscripten file system to `localStorage`, or enable Emscripten to synchronously download files from another folder as they are requested.\n\nInclude `browserfs.min.js` into the page, and add code similar to the following to your `Module`'s `preRun` array:\n\n```javascript\n/**\n * Mounts a localStorage-backed file system into the /data folder of Emscripten's file system.\n */\nfunction setupBFS() {\n  // Constructs an instance of the LocalStorage-backed file system.\n  var lsfs = new BrowserFS.FileSystem.LocalStorage();\n  // Initialize it as the root file system.\n  BrowserFS.initialize(lsfs);\n  // Grab the BrowserFS Emscripten FS plugin.\n  var BFS = new BrowserFS.EmscriptenFS();\n  // Create the folder that we'll turn into a mount point.\n  FS.createFolder(FS.root, 'data', true, true);\n  // Mount BFS's root folder into the '/data' folder.\n  FS.mount(BFS, {root: '/'}, '/data');\n}\n```\n\nNote: Do **NOT** use `BrowserFS.install(window)` on a page with an Emscripten application! Emscripten will be tricked into thinking that it is running in Node JS.\n\nIf you wish to use an asynchronous BrowserFS backend with Emscripten (e.g. Dropbox), you'll need to wrap it into an `AsyncMirror` file system first:\n\n```javascript\n/**\n * Run this prior to starting your Emscripten module.\n * @param dropboxClient An authenticated DropboxJS client.\n */\nfunction asyncSetup(dropboxClient, cb) {\n  var dbfs = new BrowserFS.FileSystem.Dropbox(dropboxClient);\n  // Wrap in AsyncMirrorFS.\n  var asyncMirror = new BrowserFS.FileSystem.AsyncMirror(\n    new BrowserFS.FileSystem.InMemory(), dbfs);\n\n  // Downloads the entire contents of the Dropbox backend into memory.\n  // You'll probably want to use an app folder, and check that you\n  // aren't pulling in a huge amount of data here.\n  asyncMirror.initialize(function(err) {\n    // Initialize it as the root file system.\n    BrowserFS.initialize(asyncMirror);\n    // BFS is ready for Emscripten!\n    cb();\n  });\n}\nfunction setupBFS() {\n  // Grab the BrowserFS Emscripten FS plugin.\n  var BFS = new BrowserFS.EmscriptenFS();\n  // Create the folder that we'll turn into a mount point.\n  FS.createFolder(FS.root, 'data', true, true);\n  // Mount BFS's root folder into the '/data' folder.\n  FS.mount(BFS, {root: '/'}, '/data');\n}\n```\n\n### Testing\n\nTo run unit tests, simply run `npm test`.\n\n### License\n\nBrowserFS is licensed under the MIT License. See `LICENSE` for details.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jvilk/BrowserFS.git"
  },
  "scripts": {
    "build": "npm-run-all --parallel build:tsc build:scripts --sequential build:rollup --parallel build:webpack build:webpack-release",
    "build:rollup": "rollup -c src/rollup.config.js",
    "build:scripts": "tsc -p scripts",
    "build:tsc": "tsc -p src",
    "build:webpack": "webpack --config src/webpack.config.js",
    "build:webpack-release": "webpack -p --config src/webpack.config.js",
    "dist": "npm-run-all build lint script:make_dist dist:build:node",
    "dist:build:node": "tsc -p src/tsconfig.node.json",
    "lint": "tslint -c src/tslint.json --project src/tsconfig.json",
    "prepublish": "npm run dist",
    "script:make_dist": "node build/scripts/make_dist.js",
    "script:make_fixture_loader": "node build/scripts/make_fixture_loader.js",
    "script:make_test_launcher": "node build/scripts/make_test_launcher.js",
    "script:make_xhrfs_index": "node build/scripts/make_xhrfs_index.js test/fixtures/xhrfs/listings.json",
    "script:make_zip_fixtures": "node build/scripts/make_zip_fixtures",
    "test": "npm-run-all test:prepare test:karma",
    "test:build": "npm-run-all test:build:tsc --parallel test:build:rollup test:build:rollup-worker --sequential test:build:webpack",
    "test:build:rollup": "rollup -c test/rollup.config.js",
    "test:build:rollup-worker": "rollup -c test/rollup.worker.config.js",
    "test:build:tsc": "tsc -p test",
    "test:build:webpack": "webpack --config test/webpack.config.js",
    "test:karma": "karma start karma.config.js",
    "test:prepare": "npm-run-all build:scripts script:make_fixture_loader script:make_test_launcher test:build script:make_zip_fixtures script:make_xhrfs_index",
    "test:watch": "npm-run-all --parallel test:watch:tsc test:watch:rollup test:watch:rollup-worker test:watch:webpack",
    "test:watch:rollup": "rollup -w -c test/rollup.config.js",
    "test:watch:rollup-worker": "rollup -w -c test/rollup.worker.config.js",
    "test:watch:tsc": "tsc --watch -p test",
    "test:watch:webpack": "webpack -w --config test/webpack.config.js",
    "watch": "npm-run-all build --parallel watch:tsc watch:scripts watch:rollup watch:webpack watch:webpack-release",
    "watch-test": "npm-run-all test:prepare --parallel watch:scripts test:watch test:karma",
    "watch:rollup": "rollup -w -c src/rollup.config.js",
    "watch:scripts": "tsc -p scripts --watch",
    "watch:tsc": "tsc -p src --watch",
    "watch:webpack": "webpack -w --config src/webpack.config.js",
    "watch:webpack-release": "webpack -w -p --config src/webpack.config.js"
  },
  "typings": "dist/browserfs",
  "version": "1.1.0"
}
