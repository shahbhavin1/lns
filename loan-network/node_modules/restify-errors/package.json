{
  "_args": [
    [
      {
        "raw": "restify-errors@^5.0.0",
        "scope": null,
        "escapedName": "restify-errors",
        "name": "restify-errors",
        "rawSpec": "^5.0.0",
        "spec": ">=5.0.0 <6.0.0",
        "type": "range"
      },
      "/Users/bhavinshah/hyper2/loan-network/node_modules/restify"
    ]
  ],
  "_from": "restify-errors@>=5.0.0 <6.0.0",
  "_id": "restify-errors@5.0.0",
  "_inCache": true,
  "_location": "/restify-errors",
  "_nodeVersion": "6.11.2",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/restify-errors-5.0.0.tgz_1502488538388_0.2903299054596573"
  },
  "_npmUser": {
    "name": "retrohacker",
    "email": "william.jblankenship@gmail.com"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "restify-errors@^5.0.0",
    "scope": null,
    "escapedName": "restify-errors",
    "name": "restify-errors",
    "rawSpec": "^5.0.0",
    "spec": ">=5.0.0 <6.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/restify"
  ],
  "_resolved": "https://registry.npmjs.org/restify-errors/-/restify-errors-5.0.0.tgz",
  "_shasum": "668717e100683eec6ce0d515f89ff1dbec254a8d",
  "_shrinkwrap": null,
  "_spec": "restify-errors@^5.0.0",
  "_where": "/Users/bhavinshah/hyper2/loan-network/node_modules/restify",
  "author": {
    "name": "Alex Liu",
    "email": "donutespresso@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/restify/errors/issues"
  },
  "contributors": [
    {
      "name": "Alex Liu"
    },
    {
      "name": "Gergely Nemeth"
    },
    {
      "name": "Mark Cavage"
    }
  ],
  "dependencies": {
    "assert-plus": "^1.0.0",
    "lodash": "^4.2.1",
    "safe-json-stringify": "^1.0.3",
    "verror": "^1.8.1"
  },
  "description": "Collection of Error objects shared across restify components.",
  "devDependencies": {
    "bunyan": "^1.5.1",
    "chai": "^3.4.1",
    "coveralls": "^2.11.4",
    "eslint": "^3.0.1",
    "istanbul": "^0.4.2",
    "jscs": "^2.11.0",
    "mkdirp": "^0.5.1",
    "mocha": "^2.3.4",
    "nsp": "^2.2.0",
    "restify": "^4.0.3",
    "restify-clients": "^1.1.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-+vby9Kxf7qlzvbZSTIEGkIixkeHG+pVCl34dk6eKnL+ua4pCezpdLT/1/eabzPZb65ADrgoc04jeWrrF1E1pvQ==",
    "shasum": "668717e100683eec6ce0d515f89ff1dbec254a8d",
    "tarball": "https://registry.npmjs.org/restify-errors/-/restify-errors-5.0.0.tgz"
  },
  "files": [
    "lib"
  ],
  "gitHead": "c83d26d70a584ca44baf6227002f6a53340ac16a",
  "homepage": "http://www.restify.com",
  "keywords": [
    "restify-errors",
    "restify",
    "errors",
    "custom errors",
    "inherit errors",
    "http errors",
    "http status code",
    "rest errors"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "donutespresso",
      "email": "donutespresso@gmail.com"
    },
    {
      "name": "micahr",
      "email": "mjr578@gmail.com"
    },
    {
      "name": "retrohacker",
      "email": "william.jblankenship@gmail.com"
    },
    {
      "name": "trentm",
      "email": "trentm@gmail.com"
    },
    {
      "name": "yunong",
      "email": "yjxiao@gmail.com"
    }
  ],
  "name": "restify-errors",
  "optionalDependencies": {
    "safe-json-stringify": "^1.0.3"
  },
  "readme": "# restify-errors\n\n[![NPM Version](https://img.shields.io/npm/v/restify-errors.svg)](https://npmjs.org/package/restify-errors)\n[![Build Status](https://travis-ci.org/restify/errors.svg?branch=master)](https://travis-ci.org/restify/errors)\n[![Coverage Status](https://coveralls.io/repos/restify/errors/badge.svg?branch=master)](https://coveralls.io/r/restify/errors?branch=master)\n[![Dependency Status](https://david-dm.org/restify/errors.svg)](https://david-dm.org/restify/errors)\n[![devDependency Status](https://david-dm.org/restify/errors/dev-status.svg)](https://david-dm.org/restify/errors#info=devDependencies)\n[![bitHound Score](https://www.bithound.io/github/restify/errors/badges/score.svg)](https://www.bithound.io/github/restify/errors/master)\n[![NSP Status](https://img.shields.io/badge/NSP%20status-no%20vulnerabilities-green.svg)](https://travis-ci.org/restify/errors)\n\n> A collection of HTTP and REST Error constructors.\n\nThe constructors can be used to new up Error objects with default status codes\nset.\n\nThe module ships with the following HttpErrors:\n\n* 400 BadRequestError\n* 401 UnauthorizedError\n* 402 PaymentRequiredError\n* 403 ForbiddenError\n* 404 NotFoundError\n* 405 MethodNotAllowedError\n* 406 NotAcceptableError\n* 407 ProxyAuthenticationRequiredError\n* 408 RequestTimeoutError\n* 409 ConflictError\n* 410 GoneError\n* 411 LengthRequiredError\n* 412 PreconditionFailedError\n* 413 RequestEntityTooLargeError\n* 414 RequesturiTooLargeError\n* 415 UnsupportedMediaTypeError\n* 416 RangeNotSatisfiableError (For Node >= 4 & iojs >= 3)\n* 416 RequestedRangeNotSatisfiableError (For Node 0.x & iojs < 3)\n* 417 ExpectationFailedError\n* 418 ImATeapotError\n* 422 UnprocessableEntityError\n* 423 LockedError\n* 424 FailedDependencyError\n* 425 UnorderedCollectionError\n* 426 UpgradeRequiredError\n* 428 PreconditionRequiredError\n* 429 TooManyRequestsError\n* 431 RequestHeaderFieldsTooLargeError\n* 500 InternalServerError\n* 501 NotImplementedError\n* 502 BadGatewayError\n* 503 ServiceUnavailableError\n* 504 GatewayTimeoutError\n* 505 HttpVersionNotSupportedError\n* 506 VariantAlsoNegotiatesError\n* 507 InsufficientStorageError\n* 509 BandwidthLimitExceededError\n* 510 NotExtendedError\n* 511 NetworkAuthenticationRequiredError\n\nand the following RestErrors:\n\n* 400 BadDigestError\n* 405 BadMethodError\n* 500 InternalError\n* 409 InvalidArgumentError\n* 400 InvalidContentError\n* 401 InvalidCredentialsError\n* 400 InvalidHeaderError\n* 400 InvalidVersionError\n* 409 MissingParameterError\n* 403 NotAuthorizedError\n* 412 PreconditionFailedError\n* 400 RequestExpiredError\n* 429 RequestThrottledError\n* 404 ResourceNotFoundError\n* 406 WrongAcceptError\n\nSome of the status codes overlap, since applications can choose the most\napplicable error type and status code for a given scenario. Should your given\nscenario require something more customized, the Error objects can be customized\nwith an options object.\n\n## Getting Started\n\nInstall the module with: `npm install restify-errors`\n\n## Usage\n\n\n### Creating Errors\n\nIn your application, create errors by using the constructors:\n\n```js\nvar errors = require('restify-errors');\n\nserver.get('/foo', function(req, res, next) {\n\n    if (!req.query.foo) {\n        return next(new errors.BadRequestError());\n    }\n\n    res.send(200, 'ok!');\n    return next();\n});\n```\n\n### Checking Error types\n\nYou can easily do instance checks against the Error objects:\n\n```js\nfunction redirectIfErr(req, res, next) {\n    var err = req.data.error;\n    if (err) {\n        if (err instanceof errors.InternalServerError) {\n            next(err);\n        } else if (err instanceof errors.NotFoundError) {\n            res.redirect('/NotFound', next);\n        }\n    }\n}\n```\n\n### Rendering Errors\n\nAll Error objects in this module are created with a `body` property. restify\nsupports 'rendering' Errors as a response using this property. You can pass\nErrors to `res.send` and the error will be rendered out as JSON:\n\n```js\nfunction render(req, res, next) {\n    res.send(new errors.InternalServerError());\n    return next();\n}\n\n// => restify will render an application/json response with an http 500:\n// {\n//     code: 'InternalServerError',\n//     message: ''\n// }\n\n```\n\n### Customizing Errors\n\nIf you'd like to change the status code or message of a built-in Error, you can\npass an options object to the constructor:\n\n```js\nfunction render(req, res, next) {\n    var myErr = new errors.InvalidVersionError({\n        statusCode: 409,\n        message: 'Version not supported with current query params'\n    });\n\n    res.send(myErr);\n    return next();\n}\n\n// => even though InvalidVersionError has a built-in status code of 400, it\n//    has been customized with a 409 status code. restify will now render an\n//    application/json response with an http 409:\n// {\n//     code: 'InvalidVersionError',\n//     message: 'Version not supported with current query params'\n// }\n\n```\n\n### Passing in prior errors (causes)\n\nLike [WError](https://github.com/davepacheco/node-verror), all constructors\naccept an Error object as the first argument to build rich Error objects and\nstack traces. Assume a previous file lookup failed and an error was passed on:\n\n```js\nfunction wrapError(req, res, next) {\n\n    if (req.error) {\n        var myErr = new errors.InternalServerError(req.error, 'bad times!');\n        return next(myErr);\n    }\n    return next();\n}\n```\n\nThis will allow Error objects to maintain context from previous errors, giving\nyou full visibility into what caused an underlying issue:\n\n```js\nconsole.log(myErr.message);\n// => 'bad times!'\n\nconsole.log(myErr.toString());\n// => InternalServerError: bad times!; caused by Error: file lookup failed!\n\n// if you're using Bunyan, you'll get rich stack traces:\nbunyanLogger.info(myErr);\n\nInternalServerError: bad times!\n    at Object.<anonymous> (/Users/restify/test.js:30:16)\n    at Module._compile (module.js:460:26)\n    at Object.Module._extensions..js (module.js:478:10)\n    at Module.load (module.js:355:32)\n    at Function.Module._load (module.js:310:12)\n    at Function.Module.runMain (module.js:501:10)\n    at startup (node.js:129:16)\n    at node.js:814:3\nCaused by: Error: file lookup failed!\n    at Object.<anonymous> (/Users/restify/test.js:29:15)\n    at Module._compile (module.js:460:26)\n    at Object.Module._extensions..js (module.js:478:10)\n    at Module.load (module.js:355:32)\n    at Function.Module._load (module.js:310:12)\n    at Function.Module.runMain (module.js:501:10)\n    at startup (node.js:129:16)\n    at node.js:814:3\n```\n\n### Bunyan support\n\nSince errors created via restify-errors inherit from VError, you'll get out of\nthe box support via bunyan's standard serializers. If you are using the\n`context` property, you can use the serializer shipped with restify-errors:\n\n```js\nvar bunyan = require('bunyan');\nvar restifyErrors = require('restify-errors');\n\nvar log = bunyan.createLogger({\n    name: 'myLogger',\n    serializers: {\n        err: restifyErrors.bunyanSerializer\n    }\n});\n\nvar err = new restifyErrors.InternalServerError({\n    message: 'cannot service this request!',\n    context: {\n        foo: 'bar',\n        bar: 1\n    }\n});\n\nlog.error(err, 'oh noes');\n```\n\n```sh\n[2016-08-31T22:27:13.117Z] ERROR: log/51633 on laptop: oh noes (err.code=InternalServer)\n    InternalServerError: cannot service this request! (foo=\"bar\", bar=1)\n        at Object.<anonymous> (/restify/test.js:11:11)\n        at Module._compile (module.js:409:26)\n        at Object.Module._extensions..js (module.js:416:10)\n        at Module.load (module.js:343:32)\n        at Function.Module._load (module.js:300:12)\n        at Function.Module.runMain (module.js:441:10)\n        at startup (node.js:139:18)\n        at node.js:974:3\n```\n\nYou can, of course, combine this with the standard set of serializers that\nbunyan ships with.\n\n\n#### VError support\n\nThis serializer also comes with support for VError's new `info` property:\n\n```js\nvar err = new VError({\n    name: 'BoomError',\n    info: {\n        foo: 'bar',\n        baz: 1\n    }\n}, 'something bad happened!');\n\nlog.error(err, 'oh noes');\n```\n\n```sh\n[2016-08-31T22:21:35.900Z] ERROR: log/50874 on laptop: oh noes\n    BoomError: something bad happened! (foo=\"bar\", baz=1)\n        at Object.<anonymous> (/restify/test.js:11:11)\n        at Module._compile (module.js:409:26)\n        at Object.Module._extensions..js (module.js:416:10)\n        at Module.load (module.js:343:32)\n        at Function.Module._load (module.js:300:12)\n        at Function.Module.runMain (module.js:441:10)\n        at startup (node.js:139:18)\n        at node.js:974:3\n```\n\nVError's MultiError is also supported:\n\n```js\nvar underlyingErr = new Error('boom');\nvar multiErr = new verror.MultiError([\n    new Error('boom'),\n    new restifyErrors.InternalServerError(underlyingErr, {\n        message: 'wrapped',\n        context: {\n            foo: 'bar',\n            baz: 1\n        }\n    })\n]);\n\nlog.error(multiErr, 'oh noes');\n```\n\n```\n[2016-08-31T22:48:43.244Z] ERROR: logger/55311 on laptop: oh noes\n    MultiError 1 of 2: Error: boom\n        at Object.<anonymous> (/restify/test.js:16:5)\n        at Module._compile (module.js:409:26)\n        at Object.Module._extensions..js (module.js:416:10)\n        at Module.load (module.js:343:32)\n        at Function.Module._load (module.js:300:12)\n        at Function.Module.runMain (module.js:441:10)\n        at startup (node.js:139:18)\n        at node.js:974:3\n    MultiError 2 of 2: InternalServerError: wrapped (foo=\"bar\", baz=1)\n        at Object.<anonymous> (/restify/test.js:17:5)\n        at Module._compile (module.js:409:26)\n        at Object.Module._extensions..js (module.js:416:10)\n        at Module.load (module.js:343:32)\n        at Function.Module._load (module.js:300:12)\n        at Function.Module.runMain (module.js:441:10)\n        at startup (node.js:139:18)\n        at node.js:974:3\n    Caused by: Error: boom\n        at Object.<anonymous> (/restify/test.js:14:21)\n        at Module._compile (module.js:409:26)\n        at Object.Module._extensions..js (module.js:416:10)\n        at Module.load (module.js:343:32)\n        at Function.Module._load (module.js:300:12)\n        at Function.Module.runMain (module.js:441:10)\n        at startup (node.js:139:18)\n        at node.js:974:3\n```\n\nFor more information about building rich errors, check out\n[VError](https://github.com/davepacheco/node-verror).\n\n\n### Subclassing Errors\n\nYou can also create your own Error subclasses by using the provided\n`makeConstructor()` method. Making a new subclass will add the constructor to\nthe existing exports object:\n\n```js\nerrors.makeConstructor('ExecutionError', {\n    statusCode: 406,\n    failureType: 'motion'\n});\nvar myErr = new errors.ExecutionError('bad joystick input!');\n\nconsole.log(myErr instanceof ExecutionError);\n// => true\n\nconsole.log(myErr.message);\n// => 'ExecutionError: bad joystick input!'\n\nconsole.log(myErr.failureType);\n// => 'motion'\n\nconsole.log(myErr.statusCode);\n// => 406\n\nconsole.log(myErr.stack);\n\nExecutionError: bad joystick input!\n    at Object.<anonymous> (/Users/restify/test.js:30:16)\n    at Module._compile (module.js:460:26)\n    at Object.Module._extensions..js (module.js:478:10)\n    at Module.load (module.js:355:32)\n    at Function.Module._load (module.js:310:12)\n    at Function.Module.runMain (module.js:501:10)\n    at startup (node.js:129:16)\n    at node.js:814:3\n```\n\nCustom errors are subclassed from RestError, so you get all the built-in\ngoodness of HttpError/RestError. The constructor returned to you accepts\nall the same signatures accepted by HttpError/RestError.\n\n## API\n\nAll error constructors are variadic and accept the following signatures:\n\n### new Error(message)\n### new Error(printf, args...)\n### new Error(options [, printf, args...])\n### new Error(priorErr, message])\n### new Error(priorErr [, printf, args...])\n### new Error(priorErr, options [, printf, args...])\n\nAll [VError and WError](https://github.com/davepacheoco/node-verror) signatures\nare also supported, including\n[extsprintf](https://github.com/davepacheco/node-extsprintf).\n\nYou can pass in a message like a regular error:\n\n* `message` {String} - an error message\n\nOr pass in an options object for more customization:\n\n* `options.message` {String} - an error message string\n* `options.statusCode` {Number} - an http status code\n* `options.restCode` {Number} - a description code for your Error. This is used\nby restify to render an error when it is directly passed to `res.send()`. By\ndefault, it is the name of your error constructor (e.g., the restCode for a\nBadDigestError is BadDigest).\n* `options.context` {Object} - object of contextual properties relevant to the\ncreation of the error, i.e., the url of a failed http request\n\nIn all signatures, you can optionally pass in an Error as the first argument,\nwhich will cause WError to use it as a prior cause:\n\n* `priorErr` {Error} - an Error object\n\n**Returns:** {Error} an Error object\n\n**IMPORTANT:** If a printf style signature is used, the Error message will\nprefer that over `options.message`.\n\n### makeConstructor(name [, defaults])\n\nCreates a custom Error constructor, adds it to the existing exports object.\n\n* `name` {String} - the name of your Error\n* `defaults` {Object} - an object of default values that will added to the\nprototype. It is possible to override the default `toString()` and `toJSON()`\nmethods.\n\n**Returns:** {void}\n\n### makeErrFromCode(name [, args...])\n\nCreate an Error object using an http status code. This uses `http` module's\n`STATUS_CODES` to do the status code lookup. Thus, this convenience method\nis useful only for creating HttpErrors, and not RestErrors.\n\n* `statusCode` {Number} - an http status code\n* `args` - arguments to be passed on to the constructor\n\n**Returns:** {Object} an Error object\n\n\n## Contributing\n\nAdd unit tests for any new or changed functionality. Ensure that lint and style\nchecks pass.\n\nTo start contributing, install the git pre-push hooks:\n\n```sh\nmake githooks\n```\n\nBefore committing, run the prepush hook:\n\n```sh\nmake prepush\n```\n\nIf you have style errors, you can auto fix whitespace issues by running:\n\n```sh\nmake codestyle-fix\n```\n\n## License\n\nCopyright (c) 2015 Alex Liu\n\nLicensed under the MIT license.\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/restify/errors.git"
  },
  "scripts": {
    "test": "make test"
  },
  "version": "5.0.0"
}
