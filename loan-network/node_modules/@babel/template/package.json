{
  "_args": [
    [
      {
        "raw": "@babel/template@7.0.0-beta.49",
        "scope": "@babel",
        "escapedName": "@babel%2ftemplate",
        "name": "@babel/template",
        "rawSpec": "7.0.0-beta.49",
        "spec": "7.0.0-beta.49",
        "type": "version"
      },
      "/Users/bhavinshah/hyper2/loan-network/node_modules/nyc/node_modules/istanbul-lib-instrument"
    ]
  ],
  "_from": "@babel/template@7.0.0-beta.49",
  "_id": "@babel/template@7.0.0-beta.49",
  "_inCache": true,
  "_location": "/@babel/template",
  "_nodeVersion": "6.12.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/template_7.0.0-beta.49_1527264219632_0.2897897284488067"
  },
  "_npmUser": {
    "name": "loganfsmyth",
    "email": "loganfsmyth@gmail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "@babel/template@7.0.0-beta.49",
    "scope": "@babel",
    "escapedName": "@babel%2ftemplate",
    "name": "@babel/template",
    "rawSpec": "7.0.0-beta.49",
    "spec": "7.0.0-beta.49",
    "type": "version"
  },
  "_requiredBy": [
    "/@babel/helper-function-name",
    "/nyc/istanbul-lib-instrument"
  ],
  "_resolved": "https://registry.npmjs.org/@babel/template/-/template-7.0.0-beta.49.tgz",
  "_shasum": "e38abe8217cb9793f461a5306d7ad745d83e1d27",
  "_shrinkwrap": null,
  "_spec": "@babel/template@7.0.0-beta.49",
  "_where": "/Users/bhavinshah/hyper2/loan-network/node_modules/nyc/node_modules/istanbul-lib-instrument",
  "author": {
    "name": "Sebastian McKenzie",
    "email": "sebmck@gmail.com"
  },
  "dependencies": {
    "@babel/code-frame": "7.0.0-beta.49",
    "@babel/parser": "7.0.0-beta.49",
    "@babel/types": "7.0.0-beta.49",
    "lodash": "^4.17.5"
  },
  "description": "Generate an AST from a string template.",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "e38abe8217cb9793f461a5306d7ad745d83e1d27",
    "tarball": "https://registry.npmjs.org/@babel/template/-/template-7.0.0-beta.49.tgz",
    "fileCount": 11,
    "unpackedSize": 23934,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbCDPbCRA9TVsSAnZWagAAhccP/1H/lfkogQ/2SRlGcWYg\nnDqhnKtKjqzcejsrdE4E2ElP25nluEIQ0hHU6X3FFVw8lrEkh/He4MWzKwFL\nz50k3sQUFIQQ2Dnjn+J/wmwGlyAqL93zXdOJLZFq733tooOc+v2LmyHnFWdK\nZbyCBnDtRaMb2Tzbo8tR/j6sbL9VDyAAvl7uaZm6QEiH9rG7AbCnlXzD3ugD\nz5rY5LpYJyAgLHVTO3/5nmZoewIA1SqUXyqccv4BIbfQ/T7ee8Pdr6+vJPp/\noqBPAAOpj3aAIC/+XnA6MSd6m+5F4EgvUjefzzJVVw7YCFXFbQVt+RdLHQKQ\nJmyzy9Ht/kEtDXHVEPhtgIRKVJ64zjZRl5GrM7SVasb8b7DFgU0M8rAlJlCm\np9w9Ra6/CHU4+d8EAAyXyyBcJSIuvg1NqyyOiJyTKnwOiSYaA5Vkq2pWXmEG\nR38g6Bk7skWqw/7CoEaZBnBhFIfHYGG+X5Al2NvgbSyx9kFDWpbN/45hErhj\njuOVRYug0geEBtAYlg3XoK46N/oHV+OULDxEunbTUfy5oE/18PBRrixZSmdK\nhAOrqQOvso0NJG6I6+rxzLJLwLgRBcw6tMcdpLLO5vBEpr0DrVnrBR0DfEU7\nRvQC1dmqG5BbahUtjc/UFP4A+grWK55UTnuIsiN0GRbVSJIJtqXaQrT7byNN\n6IGh\r\n=Lh3h\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "homepage": "https://babeljs.io/",
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "danez",
      "email": "daniel@tschinder.de"
    },
    {
      "name": "existentialism",
      "email": "bng412@gmail.com"
    },
    {
      "name": "hzoo",
      "email": "hi@henryzoo.com"
    },
    {
      "name": "loganfsmyth",
      "email": "loganfsmyth@gmail.com"
    },
    {
      "name": "xtuc",
      "email": "contact@xtuc.fr"
    }
  ],
  "name": "@babel/template",
  "optionalDependencies": {},
  "readme": "# @babel/template\n\n> Generate an AST from a string template or template literal.\n\nIn computer science, this is known as an implementation of quasiquotes.\n\n## Install\n\n```sh\nnpm install --save-dev @babel/template\n```\n\n## String Usage\n\n```js\nimport template from \"@babel/template\";\nimport generate from \"@babel/generator\";\nimport * as t from \"@babel/types\";\n\nconst buildRequire = template(`\n  var IMPORT_NAME = require(SOURCE);\n`);\n\nconst ast = buildRequire({\n  IMPORT_NAME: t.identifier(\"myModule\"),\n  SOURCE: t.stringLiteral(\"my-module\")\n});\n\nconsole.log(generate(ast).code);\n```\n\n```js\nconst myModule = require(\"my-module\");\n```\n\n### `.ast`\n\nIf no placeholders are in use and you just want a simple way to parse a\nstring into an AST, you can use the `.ast` version of the template.\n\n```js\nconst ast = template.ast(`\n  var myModule = require(\"my-module\");\n`);\n```\nwhich will parse and return the AST directly.\n\n\n## Template Literal Usage\n\n```js\nimport template from \"@babel/template\";\nimport generate from \"@babel/generator\";\nimport * as t from \"@babel/types\";\n\nconst fn = template`\n  var IMPORT_NAME = require('${\"my-module\"}');\n`);\n\nconst ast = fn({\n  IMPORT_NAME: t.identifier(\"myModule\");\n});\n\nconsole.log(generate(ast).code);\n```\n\nNote that placeholders can be passed directly as part of the template literal\nin order to make things as readable as possible, or they can be passed into\nthe template function.\n\n### `.ast`\n\nIf no placeholders are in use and you just want a simple way to parse a\nstring into an AST, you can use the `.ast` version of the template.\n\n```js\nconst name = \"my-module\";\nconst mod = \"myModule\";\n\nconst ast = template.ast`\n  var ${mod} = require(\"${name}\");\n`;\n```\nwhich will parse and return the AST directly. Note that unlike the string-based\nversion mentioned earlier, since this is a template literal, it is still\nvalid to perform replacements using template literal replacements.\n\n\n## AST results\n\nThe `@babel/template` API exposes a few flexible APIs to make it as easy as\npossible to create ASTs with an expected structure. Each of these also has\nthe `.ast` property mentioned above.\n\n### `template`\n\n`template` returns either a single statement, or an array of\nstatements, depending on the parsed result.\n\n### `template.smart`\n\nThis is the same as the default `template` API, returning either a single\nnode, or an array of nodes, depending on the parsed result.\n\n### `template.statement`\n\n`template.statement(\"foo;\")()` returns a single statement node, and throw\nan exception if the result is anything but a single statement.\n\n### `template.statements`\n\n`template.statements(\"foo;foo;\")()` returns an array of statement nodes.\n\n### `template.expression`\n\n`template.expression(\"foo\")()` returns the expression node.\n\n### `template.program`\n\n`template.program(\"foo;\")()` returns the `Program` node for the template.\n\n\n## API\n\n### `template(code, [opts])`\n\n#### code\n\nType: `string`\n\n#### options\n\n`@babel/template` accepts all of the options from [Babel Parser](https://github.com/babel/babel/tree/master/packages/babel-parser), and specifies\nsome defaults of its own:\n\n* `allowReturnOutsideFunction` is set to `true` by default.\n* `allowSuperOutsideMethod` is set to `true` by default.\n* `sourceType` is set to `module` by default.\n\n##### placeholderWhitelist\n\nType: `Set<string>`\nDefault: `undefined`\n\nA set of placeholder names to automatically accept. Items in this list do\nnot need to match the given placeholder pattern.\n\n##### placeholderPattern\n\nType: `RegExp | false`\nDefault: `/^[_$A-Z0-9]+$/`\n\nA pattern to search for when looking for Identifier and StringLiteral\nnodes that should be considered placeholders.\n'false' will disable placeholder searching entirely, leaving only the\n'placeholderWhitelist' value to find placeholders.\n\n##### preserveComments\n\nType: `boolean`\nDefault: `false`\n\nSet this to `true` to preserve any comments from the `code` parameter.\n\n#### Return value\n\nBy default `@babel/template` returns a `function` which is invoked with an\noptional object of replacements. See the usage section for an example.\n\nWhen using `.ast`, the AST will be returned directly.\n\n[@babel/parser]: https://github.com/babel/babel/tree/master/packages/babel-parser#options\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "https://github.com/babel/babel/tree/master/packages/babel-template"
  },
  "scripts": {},
  "version": "7.0.0-beta.49"
}
